# -*- coding: utf-8 -*-
"""Task_06.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sRGxM9itgH14jeb4-cdcBGOE9mud9LuQ
"""

def kth_smallest_num(arr,l,r,k):
    if l == r:
        return arr[l]
    else:
        idx = partition(arr, l, r)
        if idx + 1 == k:
            return arr[idx]
        elif idx+1 > k:
            return kth_smallest_num(arr,l,idx-1,k)
        else:
            return kth_smallest_num(arr,idx+1,r,k)

def partition(arr,l,r):
    pivot = arr[r]
    i = l-1
    for j in range(l, r):
        if arr[j] <= pivot:
            i += 1
            arr[i],arr[j] = arr[j],arr[i]
    arr[i+1],arr[r] = arr[r], arr[i+1]
    return i+1


input_6=open("/content/input6.txt","r")
output_6=open("/content/output6.txt","w")

n = input_6.readline().split()
n = int(x[0])

arr = input_6.readline().split()
arr = [int(i) for i in arr]

num_of_query = input_6.readline().strip()
num_of_query = int(num_of_query[0])
query_arr = []

for i in range(num_of_query):
    query_arr.append(int(input_6.readline().strip()))


for k in query_arr:
    ans = kth_smallest_num(arr, 0, n-1, k)
    output_6.write(f"{ans} \n")




input_6.close()
output_6.close()