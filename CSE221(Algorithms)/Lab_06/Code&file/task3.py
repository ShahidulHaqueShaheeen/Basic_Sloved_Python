# -*- coding: utf-8 -*-
"""task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15HAIdkL4KT9rGVR_IKpK3eWYrI8qLdz3
"""



input = open("/content/input3.txt", 'r')
output = open("/content/output3.txt", 'w')


def makeset(u):
    master[u] = u
    size[u] = 1

def find(u):
    if master[u] == u:
        return u
    master[u] = find(master[u]) # Huristic 1: path compression
    return master[u]

def unite(u, v):
    u = find(u)
    v = find(v)

    if u == v:
        return False

    if size[u] > size[v]:  # Huristic 2: unite by size
        master[v] = u
        size[u] += size[v]
    else:
        master[u] = v
        size[v] += size[u]

    return True
#=========================================

nodes, edges = map(int, input.readline().split())

master = [0] * (nodes+1)
size = [0] * (nodes+1)

#making everyone's master itself and size 1
for i in range(1, nodes+1):
    makeset(i)

for i in range(edges):
    u, v = map(int, input.readline().split())

    unite(u, v)
    print(size[find(u)], file = output)



input.close()
output.close()