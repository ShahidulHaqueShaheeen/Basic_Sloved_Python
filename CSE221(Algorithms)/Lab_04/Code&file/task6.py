# -*- coding: utf-8 -*-
"""task6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15HAIdkL4KT9rGVR_IKpK3eWYrI8qLdz3
"""

def max_diamonds(i, j):
    global count
    visited[i][j] = 1

    if adj_matrix[i][j] == 'D':
        count += 1

    #Left move
    if j > 0 and visited[i][j-1] == 0 and adj_matrix[i][j-1] != '#':
        max_diamonds(i, j-1)

    #Right move
    if j < colmns-1 and visited[i][j+1] == 0 and adj_matrix[i][j+1] != '#':
        max_diamonds(i, j+1)

    #Up move
    if i > 0 and visited[i-1][j] == 0 and adj_matrix[i-1][j] != '#':
        max_diamonds(i-1, j)

    #Down move
    if i < rows-1 and visited[i+1][j] == 0 and adj_matrix[i+1][j] != '#':
        max_diamonds(i+1, j)




input6 = open('/content/input6.txt', 'r')
output6 = open('/content/output6.txt','w')

rows, colmns= map(int, input6.readline().split())

adj_matrix = []
visited = [[0 for i in range(colmns)] for i in range(rows)]

for i in range(rows):
  adj_matrix.append(input6.readline().strip())


count = 0
max_count = 0

for i in range(rows):
    for j in range(colmns):
        if visited[i][j] == 0:
            max_count = max(max_count, count)
            count = 0
            max_diamonds(i, j)

output6.write(f"{max_count}")



input6.close()
output6.close()